// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bid entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bid entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bid", id.toString(), this);
  }

  static load(id: string): Bid | null {
    return store.get("Bid", id) as Bid | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHashBidded(): Bytes {
    let value = this.get("txHashBidded");
    return value.toBytes();
  }

  set txHashBidded(value: Bytes) {
    this.set("txHashBidded", Value.fromBytes(value));
  }

  get txHashCanceled(): Bytes | null {
    let value = this.get("txHashCanceled");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHashCanceled(value: Bytes | null) {
    if (value === null) {
      this.unset("txHashCanceled");
    } else {
      this.set("txHashCanceled", Value.fromBytes(value as Bytes));
    }
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get live(): boolean {
    let value = this.get("live");
    return value.toBoolean();
  }

  set live(value: boolean) {
    this.set("live", Value.fromBoolean(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get vAmount(): BigInt {
    let value = this.get("vAmount");
    return value.toBigInt();
  }

  set vAmount(value: BigInt) {
    this.set("vAmount", Value.fromBigInt(value));
  }

  get selectedAmount(): BigInt {
    let value = this.get("selectedAmount");
    return value.toBigInt();
  }

  set selectedAmount(value: BigInt) {
    this.set("selectedAmount", Value.fromBigInt(value));
  }

  get timeBidded(): BigInt {
    let value = this.get("timeBidded");
    return value.toBigInt();
  }

  set timeBidded(value: BigInt) {
    this.set("timeBidded", Value.fromBigInt(value));
  }

  get timeCanceled(): BigInt | null {
    let value = this.get("timeCanceled");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeCanceled(value: BigInt | null) {
    if (value === null) {
      this.unset("timeCanceled");
    } else {
      this.set("timeCanceled", Value.fromBigInt(value as BigInt));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get selected(): boolean {
    let value = this.get("selected");
    return value.toBoolean();
  }

  set selected(value: boolean) {
    this.set("selected", Value.fromBoolean(value));
  }

  get depositAmount(): BigInt {
    let value = this.get("depositAmount");
    return value.toBigInt();
  }

  set depositAmount(value: BigInt) {
    this.set("depositAmount", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get withdrawableAmount(): BigInt {
    let value = this.get("withdrawableAmount");
    return value.toBigInt();
  }

  set withdrawableAmount(value: BigInt) {
    this.set("withdrawableAmount", Value.fromBigInt(value));
  }
}
