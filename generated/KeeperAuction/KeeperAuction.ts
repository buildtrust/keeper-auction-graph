// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionEnd extends ethereum.Event {
  get params(): AuctionEnd__Params {
    return new AuctionEnd__Params(this);
  }
}

export class AuctionEnd__Params {
  _event: AuctionEnd;

  constructor(event: AuctionEnd) {
    this._event = event;
  }

  get tokens(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get amount(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get keepers(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }
}

export class Bidded extends ethereum.Event {
  get params(): Bidded__Params {
    return new Bidded__Params(this);
  }
}

export class Bidded__Params {
  _event: Bidded;

  constructor(event: Bidded) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Canceled extends ethereum.Event {
  get params(): Canceled__Params {
    return new Canceled__Params(this);
  }
}

export class Canceled__Params {
  _event: Canceled;

  constructor(event: Canceled) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EndLocked extends ethereum.Event {
  get params(): EndLocked__Params {
    return new EndLocked__Params(this);
  }
}

export class EndLocked__Params {
  _event: EndLocked;

  constructor(event: EndLocked) {
    this._event = event;
  }

  get keeperHolder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get deadline(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Refund extends ethereum.Event {
  get params(): Refund__Params {
    return new Refund__Params(this);
  }
}

export class Refund__Params {
  _event: Refund;

  constructor(event: Refund) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class KeeperAuction__bidsResult {
  value0: Address;
  value1: boolean;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: boolean,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class KeeperAuction__selectedTokensResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class KeeperAuction__tokensResult {
  value0: boolean;
  value1: Address;
  value2: i32;
  value3: BigInt;

  constructor(value0: boolean, value1: Address, value2: i32, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class KeeperAuction__userBidsResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class KeeperAuction__getBidResult {
  value0: Address;
  value1: boolean;
  value2: BigInt;
  value3: Address;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: boolean,
    value2: BigInt,
    value3: Address,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class KeeperAuction extends ethereum.SmartContract {
  static bind(address: Address): KeeperAuction {
    return new KeeperAuction("KeeperAuction", address);
  }

  DECIMALS(): BigInt {
    let result = super.call("DECIMALS", "DECIMALS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DECIMALS", "DECIMALS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAXIMUM_DELAY(): BigInt {
    let result = super.call("MAXIMUM_DELAY", "MAXIMUM_DELAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAXIMUM_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAXIMUM_DELAY",
      "MAXIMUM_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_DELAY(): BigInt {
    let result = super.call("MINIMUM_DELAY", "MINIMUM_DELAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MINIMUM_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_DELAY",
      "MINIMUM_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_AMOUNT(): BigInt {
    let result = super.call("MIN_AMOUNT", "MIN_AMOUNT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_AMOUNT", "MIN_AMOUNT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bidders(param0: BigInt): Address {
    let result = super.call("bidders", "bidders(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_bidders(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("bidders", "bidders(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bids(param0: BigInt): KeeperAuction__bidsResult {
    let result = super.call(
      "bids",
      "bids(uint256):(address,bool,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new KeeperAuction__bidsResult(
      result[0].toAddress(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_bids(param0: BigInt): ethereum.CallResult<KeeperAuction__bidsResult> {
    let result = super.tryCall(
      "bids",
      "bids(uint256):(address,bool,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KeeperAuction__bidsResult(
        value[0].toAddress(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  deadline(): BigInt {
    let result = super.call("deadline", "deadline():(uint256)", []);

    return result[0].toBigInt();
  }

  try_deadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deadline", "deadline():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ended(): boolean {
    let result = super.call("ended", "ended():(bool)", []);

    return result[0].toBoolean();
  }

  try_ended(): ethereum.CallResult<boolean> {
    let result = super.tryCall("ended", "ended():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeperHolder(): Address {
    let result = super.call("keeperHolder", "keeperHolder():(address)", []);

    return result[0].toAddress();
  }

  try_keeperHolder(): ethereum.CallResult<Address> {
    let result = super.tryCall("keeperHolder", "keeperHolder():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  selectedTokens(param0: BigInt): KeeperAuction__selectedTokensResult {
    let result = super.call(
      "selectedTokens",
      "selectedTokens(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new KeeperAuction__selectedTokensResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_selectedTokens(
    param0: BigInt
  ): ethereum.CallResult<KeeperAuction__selectedTokensResult> {
    let result = super.tryCall(
      "selectedTokens",
      "selectedTokens(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KeeperAuction__selectedTokensResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  tokens(param0: Address): KeeperAuction__tokensResult {
    let result = super.call(
      "tokens",
      "tokens(address):(bool,address,uint8,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new KeeperAuction__tokensResult(
      result[0].toBoolean(),
      result[1].toAddress(),
      result[2].toI32(),
      result[3].toBigInt()
    );
  }

  try_tokens(
    param0: Address
  ): ethereum.CallResult<KeeperAuction__tokensResult> {
    let result = super.tryCall(
      "tokens",
      "tokens(address):(bool,address,uint8,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KeeperAuction__tokensResult(
        value[0].toBoolean(),
        value[1].toAddress(),
        value[2].toI32(),
        value[3].toBigInt()
      )
    );
  }

  userBids(param0: Address): KeeperAuction__userBidsResult {
    let result = super.call("userBids", "userBids(address):(bool,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new KeeperAuction__userBidsResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_userBids(
    param0: Address
  ): ethereum.CallResult<KeeperAuction__userBidsResult> {
    let result = super.tryCall("userBids", "userBids(address):(bool,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KeeperAuction__userBidsResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getBid(_index: BigInt): KeeperAuction__getBidResult {
    let result = super.call(
      "getBid",
      "getBid(uint256):(address,bool,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return new KeeperAuction__getBidResult(
      result[0].toAddress(),
      result[1].toBoolean(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt()
    );
  }

  try_getBid(_index: BigInt): ethereum.CallResult<KeeperAuction__getBidResult> {
    let result = super.tryCall(
      "getBid",
      "getBid(uint256):(address,bool,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KeeperAuction__getBidResult(
        value[0].toAddress(),
        value[1].toBoolean(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt()
      )
    );
  }

  bidderAmount(bidder: Address): BigInt {
    let result = super.call("bidderAmount", "bidderAmount(address):(uint256)", [
      ethereum.Value.fromAddress(bidder)
    ]);

    return result[0].toBigInt();
  }

  try_bidderAmount(bidder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bidderAmount",
      "bidderAmount(address):(uint256)",
      [ethereum.Value.fromAddress(bidder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userBidsIndex(bidder: Address): Array<BigInt> {
    let result = super.call(
      "userBidsIndex",
      "userBidsIndex(address):(uint256[])",
      [ethereum.Value.fromAddress(bidder)]
    );

    return result[0].toBigIntArray();
  }

  try_userBidsIndex(bidder: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "userBidsIndex",
      "userBidsIndex(address):(uint256[])",
      [ethereum.Value.fromAddress(bidder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  bidderCount(): BigInt {
    let result = super.call("bidderCount", "bidderCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidderCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidderCount", "bidderCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bidCount(): BigInt {
    let result = super.call("bidCount", "bidCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidCount", "bidCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  biddable(): boolean {
    let result = super.call("biddable", "biddable():(bool)", []);

    return result[0].toBoolean();
  }

  try_biddable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("biddable", "biddable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawable(): boolean {
    let result = super.call("withdrawable", "withdrawable():(bool)", []);

    return result[0].toBoolean();
  }

  try_withdrawable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdrawable", "withdrawable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cancelable(_index: BigInt): boolean {
    let result = super.call("cancelable", "cancelable(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBoolean();
  }

  try_cancelable(_index: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("cancelable", "cancelable(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBlockTimestamp(): BigInt {
    let result = super.call(
      "getBlockTimestamp",
      "getBlockTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBlockTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockTimestamp",
      "getBlockTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _delay(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class LockEndCall extends ethereum.Call {
  get inputs(): LockEndCall__Inputs {
    return new LockEndCall__Inputs(this);
  }

  get outputs(): LockEndCall__Outputs {
    return new LockEndCall__Outputs(this);
  }
}

export class LockEndCall__Inputs {
  _call: LockEndCall;

  constructor(call: LockEndCall) {
    this._call = call;
  }

  get _keeperHolder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LockEndCall__Outputs {
  _call: LockEndCall;

  constructor(call: LockEndCall) {
    this._call = call;
  }
}

export class EndCall extends ethereum.Call {
  get inputs(): EndCall__Inputs {
    return new EndCall__Inputs(this);
  }

  get outputs(): EndCall__Outputs {
    return new EndCall__Outputs(this);
  }
}

export class EndCall__Inputs {
  _call: EndCall;

  constructor(call: EndCall) {
    this._call = call;
  }

  get keepers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class EndCall__Outputs {
  _call: EndCall;

  constructor(call: EndCall) {
    this._call = call;
  }
}
